@page "/profile"
@using System.IdentityModel.Tokens.Jwt
@using Shared.DB.Classes.User
@using Shared.Extensions
@using Desktop.Services

@inject ApiService _ApiService
@inherits CookieCheck
@inject NavigationManager nav


<h1 class="text-center" style="font-size: 21px; justify-content: center ">Мой профиль @user?.Id</h1>
<div class="row d-flex justify-content-center align-items-center h-100">
    <div class="col col-lg-6 mb-4 mb-lg-0">
        <div class="card mb-3" style="border-radius: .5rem; border-color: #672C94; background-color: #EFF4FF">
            <div class="row g-0">
                <div class="col-md-4 gradient-custom text-center"
                     style="border-top-left-radius: .5rem; border-bottom-left-radius: .5rem;">
                    <img src="profile.png"
                         alt="Avatar" class="img-fluid my-5" style="width: 80px;"/>
                </div>
                <div class="col-md-8 justify-content-center" style="-webkit-text-fill-color: #00003A ">
                    <div class="card-body p-5">
                        <h5>@user?.NormalizedUserName</h5>
                        <p>@AccessLevel.ToString()</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button class="btn btn-outline-primary" style="border-radius: .5rem; border-color: #00003A; background-color: #EFF4FF; --bs-btn-color: #00003A;  box-shadow: none;" type="button" @onclick="Logout"> Выход </button>
        </div>
        <div>

        </div>

    </div>
</div>


@code {

    private User? user { get; set; }

    private AccessLevel? AccessLevel { get; set; }

    public Profile()
    {
        RequiredAccessLevel = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var token = await SecureStorage.GetAsync(JWTExtensions.JwtCookieName);
        var UserId = JWTExtensions.GetGuidFromToken(JWTExtensions.TokenFromString(token));
        user = await _ApiService.GetUser(UserId);

        if (!string.IsNullOrEmpty(token))
        {
            var access = await _ApiService?.GetUserAccessById(new JwtSecurityToken(token).GetGuidFromToken())!;
            AccessLevel = access is null ? 0 : (AccessLevel)access;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void Logout()
    {
        SecureStorage.Remove(JWTExtensions.JwtCookieName);
        nav.NavigateTo("/auth");
    }

}