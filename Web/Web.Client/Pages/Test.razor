@page "/Test/{TestLink}"

@using System.Text.Json
@using Microsoft.Extensions.Logging
@using Shared.Data.Test
@using Shared.Data.Test.Answers
@using Shared.Data.Test.Task
@using Shared.Types
@using Microsoft.AspNetCore.Authorization
@using Web.Client.Components.Custom

@attribute [Authorize]
@rendermode InteractiveWebAssembly

@if (test == null)
{
    <p> Загрузка... </p>
}
else if (test.Tasks?.Count == 0)
{
    <h3>При загрузке теста произошла ошибка, либо не смогли загрузить задания для теста</h3>
}
else
{
    <h3 class="text-center" style="-webkit-text-fill-color: #00003A;">Тест: @test?.TestName</h3>

    <AuthorizeView>
        <NotAuthorized>
            <div class="d-flex justify-content-center row">
                <div class="card mb-3"
                     style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                    <div class="col-md-10 col-lg-10">
                        <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                            <h4>Задание 0</h4>
                        </div>
                        <div class="question p-3 border-bottom">
                            <div class="d-flex flex-row align-items-center question-title">
                                <h5 class="mt-1 ml-2"> Введите имя</h5>
                            </div>

                            <div class="input-group mb-3">
                                <input type="text" class="form-control" @bind="@testAnswer.FantomName"
                                       aria-describedby="basic-addon1">
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>

    @foreach (var task in test?.Tasks!)
    {
        var number = test.Tasks.IndexOf(task) + 1;
        switch (task.InteractionType)
        {
            case InteractionType.LongStringTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3"
                         style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">
                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4>Задание @(number): @task.InteractionType.ToString()</h4>
                            </div>
                            <div class="question p-3 border-bottom">
                                <div class="d-flex flex-row align-items-center question-title">
                                    <h5 class="mt-1 ml-2">@task.Question</h5>
                                </div>

                                <div class="form-floating">
                                    <textarea class="form-control" type="text" id="floatingTextarea2"
                                              @bind="@task.VariableAnswers[0].StringAnswer"
                                              style="height: 100px">t</textarea>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.ShortStringTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3"
                         style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">
                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4>Задание @(number): @task.InteractionType.ToString()</h4>
                            </div>
                            <div class="question p-3 border-bottom">
                                <div class="d-flex flex-row align-items-center question-title">
                                    <h5 class="mt-1 ml-2"> @task.Question</h5>
                                </div>

                                <div class="input-group mb-3">
                                    <input type="text" class="form-control"
                                           @bind="@task.VariableAnswers[0].StringAnswer"
                                           aria-describedby="basic-addon1">
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.ManyVariantsTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3"
                         style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">

                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4>Задание @(number): @task.InteractionType.ToString()</h4>
                            </div>
                        </div>
                        <div class="question p-3 border-bottom">
                            <div class="d-flex flex-row align-items-center question-title">
                                <h5 class="mt-1 ml-2"> @task.Question</h5>
                            </div>

                            @foreach (var varAns in task.VariableAnswers!)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox"
                                           id="@($"answer-{task.Id}-{varAns.Id}")" @bind="@varAns.Truthful"
                                           style="padding: 3pt">
                                    <label class="form-check-label" for="@($"answer-{task.Id}-{varAns.Id}")">
                                        @varAns.StringAnswer
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.OneVariantTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3"
                         style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">

                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4>Задание @(number): @task.InteractionType.ToString()</h4>
                            </div>
                        </div>
                        <div class="question p-3 border-bottom">
                            <div class="d-flex flex-row align-items-center question-title">
                                <h5 class="mt-1">@task.Question</h5>
                            </div>
                            @foreach (var varAns in task.VariableAnswers!)
                            {
                                <div class="ans ml-2">
                                    <label class="radio">
                                        <input type="radio" checked="@varAns.Truthful"
                                               @onchange="@(e => UpdateOneAnswer(task, varAns))"
                                               name="@($"answer-{task.Id}")" style="padding: 3pt">@varAns.StringAnswer
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.SqlQueryTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3"
                         style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">
                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4>Задание @(number): @task.InteractionType.ToString()</h4>
                            </div>
                            <div class="question p-3 border-bottom">
                                <div class="d-flex flex-row align-items-center question-title">
                                    <h5 class="mt-1 ml-2">@task.Question</h5>
                                </div>

                                <div class="form-floating">
                                    <AceEditor Value="task.VariableAnswers[0].StringAnswer"></AceEditor>

                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.None:
                continue;
            default:
                continue;
        }
    }

    <div class="d-grid gap-2 d-md-flex justify-content-md-start"
         style="height: 40px; -webkit-text-fill-color: #00003A; box-shadow: none;">
        <button class="btn btn-outline-primary" disabled="@IsSended" @onclick="SaveAndSubmit"
                style="border-radius: .5rem; border-color: #00003A; background-color: #EFF4FF; --bs-btn-color: #00003A; height: 40px; box-shadow: none;"
                type="button">
            Сохранить
        </button>
    </div>
}

@code {
    [Inject] private ApiService ApiService { get; }
    [Inject] private ILogger<Test> Logger { get; }
    [Inject] private NavigationManager NavigationManager { get; }

    [Parameter] public string TestLink { get; set; }
    private TestAnswer testAnswer { get; set; } = new TestAnswer()
    {
        AnsweredTest = null,
    };
    private UniqueTest? test => testAnswer.AnsweredTest;
    private bool IsSended { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        testAnswer.AnsweredTest = await ApiService.GetTest(TestLink);
        Logger.LogInformation($"Got test {TestLink}");
    }

    private static void UpdateOneAnswer(UniqueTask task, VariableAnswer selectedAnswer)
    {
        foreach (var varAns in task.VariableAnswers)
        {
            varAns.Truthful = varAns == selectedAnswer;
        }
    }

    private async void SaveAndSubmit()
    {
        IsSended = true;
        var ansTestId = await ApiService.SubmitTest(testAnswer);
        NavigationManager.NavigateTo($"result_test/{ansTestId}");
    }

}