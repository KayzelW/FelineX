@page "/Test/My"
@attribute [Authorize(Policy = "Teacher")]

@using QRCoder
@using Microsoft.AspNetCore.Authorization
@using Shared.Data.Test


<div class="container-center">
    <button class="btn" style=" box-shadow: none;" type="button" @onclick="NavigateToCreateTest">Создать новый тест
    </button>
</div>

<div class="text-success" style="border-color:  #00003A; height: 1px">
    <hr>
</div>

<div>
    <h2 class="text-left">Тесты</h2>
    <h1></h1>
</div>

@if (Tests.Count == 0)
{
    <p>No available tests</p>
}
else
{
    <table class="table table-borderless table-responsive table-a" size="auto"
           style="--bs-table-bg: #DDEBFF; border-radius: .5rem;  -webkit-text-fill-color: #00003A">
        <thead>
        <tr>
            <th scope="col" style=" -webkit-text-fill-color: #00003A; border-radius: .5rem">#</th>
            <th scope="col" style="-webkit-text-fill-color: #00003A">Название</th>
            <th scope="col" style="-webkit-text-fill-color: #00003A">Дата создания</th>
            <th scope="col" style=" -webkit-text-fill-color: #00003A">Кол-во заданий</th>
            <th scope="col" style="-webkit-text-fill-color: #00003A"></th>
        </tr>
        </thead>
        <tbody>

        @foreach (var test in Tests)
        {
            <tr>
                <th scope="row">@test.Id</th>
                <td>
                    <p>
                        <a class="link-opacity-100-hover"
                           @onclick="() => NavigateToTest(test.Id.ToString())">@test.TestName</a>
                    </p>
                </td>
                <td>@test.CreationTime.ToString()</td>
                <td>@test.Tasks?.Count</td>
                <td>
                    <div class="btn-group" role="group" aria-label="Basic example" style="box-shadow: none;">
                        <button type="button" class="btn btn-secondary m-1 btn-transparent"
                                style="background-color: transparent; border: 0px; box-shadow: none;"
                                @onclick="() => ShowQrCode(test.Id)">
                            <i class="bi bi-qr-code" style="color: #00003A; box-shadow: none;" title="QR-код"></i>
                        </button>
                        <button type="button" class="btn btn-secondary m-1"
                                style="background-color: transparent; border: 0px; box-shadow: none;"
                                @onclick="() => NavigateToTestCorrect(test.Id.ToString())">
                            <i class="bi bi-pencil" style="color: #00003A; box-shadow: none;" title="Изменить"></i>
                        </button>
                        <button type="button" class="btn btn-secondary m-1 btn-transparent"
                                style="background-color: transparent; border: 0px; box-shadow: none;"
                                @onclick="() => DeleteTest(test)">
                            <i class="bi bi-trash3" style="color: #00003A; box-shadow: none;" title="Удалить"></i>
                        </button>
                        <button type="button" class="btn btn-secondary m-1 btn-transparent"
                                style="background-color: transparent; border: 0px; box-shadow: none;"
                                @onclick="() => NavigateToTestAnswers(test.Id.ToString())">
                            <i class="bi bi-bar-chart-line" style="color: #00003A; box-shadow: none;"
                               title="Решения"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (isQrModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color:#DDEBFF; border-color: #00003A">
                <div class="modal-header">
                    <h5 class="modal-title">QR-код для теста</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="HideQrCode"></button>
                </div>
                <div class="modal-body">
                    @if (qrCodeImage != null)
                    {
                        <img src="@qrCodeImage" alt="QR Code" style="width: 100%; height: auto;"/>
                    }
                    else
                    {
                        <p>Ошибка при генерации QR-кода.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private ILogger<TestMy> Logger { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }

    private List<UniqueTest> Tests { get; set; } = new();
    private bool isQrModalVisible;
    private string? qrCodeImage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            Tests = await HttpClient.GetFromJsonAsync<List<UniqueTest>>("/api/Test/get_tests") ?? [];
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void NavigateToCreateTest()
    {
        NavigationManager.NavigateTo("/Test/Create");
    }

    private void NavigateToTest(string testId)
    {
        NavigationManager.NavigateTo($"/Test/{testId}");
    }

    private void NavigateToTestAnswers(string testId)
    {
        NavigationManager.NavigateTo($"/test_answers/{testId}");
    }

    private void NavigateToTestCorrect(string testId)
    {
        NavigationManager.NavigateTo($"/correctionTest/{testId}");
    }

    private async Task DeleteTest(UniqueTest test)
    {
        Tests.Remove(test);
        await HttpClient.DeleteAsync($"api/Test/delete_test/{test.Id}");
        await InvokeAsync(StateHasChanged);
    }

    private void ShowQrCode(Guid testId)
    {
        var testLink = NavigationManager.BaseUri + $"test/{testId}";
        qrCodeImage = GenerateQrCode(testLink);
        isQrModalVisible = true;
    }

    private void HideQrCode()
    {
        isQrModalVisible = false;
        qrCodeImage = null;
    }

    private string? GenerateQrCode(string text)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(20);
        var imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
        return imageDataUrl;
    }

}
