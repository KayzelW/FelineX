@page "/Create_test"

@using Shared.DB.Classes.Test.Task
@using Shared.Extensions
@using WebApp.Services
@rendermode InteractiveServer
@using MyTest = Shared.DB.Classes.Test.Test;
@using MyTask = Shared.DB.Classes.Test.Task.Task;
@using Task = System.Threading.Tasks.Task
@inject ApiService _apiService

<h3 class="text-center">Новый тест</h3>

<div class="input-group input-group-lg" style="max-width: max-content">
    <input type="text" class="form-control" placeholder="Введите название" aria-label="Введите название" aria-describedby="basic-addon1" @bind="test.TestName" style="background-color: #EFF4FF;  ">
</div>


<div class="container mt-5">
    @foreach (var task in test.Tasks!)
    {
        <div class="d-flex justify-content-center row">
            <div class="card mb-3" style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                <div class="col-md-10 col-lg-10">

                    <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                        <h4>Задание @(test.Tasks!.IndexOf(task) + 1) </h4>
                        <span>(@(test.Tasks!.IndexOf(task) + 1) of @test.Tasks!.Count)</span>
                    </div>
                </div >
                <div class="input-group input-group-md">
                    <span class="input-group-text" id="basic-addon1"  style="background-color: #E7EEFF;  "></span>
                    <input type="text" class="form-control" placeholder="Введите задание" aria-describedby="basic-addon1" @bind="task.Question"  style="background-color: #EFF4FF; border-color: #BDD3FF;">
                </div>
                
                @switch (task.InteractionType)
                {
                    case InteractionType.ManyVariantsTask:
                        <div class="d-flex justify-content-lg-start row-cols-1">
                            <div class="input-group input-group-sm mb-3" style="max-width: max-content; border-color: #DDE8FF ">
                                <span class="input-group-text" id="inputGroup-sizing-sm4" style="background-color: #E7EEFF;  ">кол-во</span>
                                <input type="text" class="form-control" placeholder="Количество вариантов" aria-describedby="inputGroup-sizing-sm"
                                       @bind="task.CountVariables" style="background-color: #EFF4FF; border-color: #BDD3FF;">
                            </div>
                            </div>
                        <div class="question p-3 border-bottom">

                            @foreach (var varAnswer in task.VariableAnswers!)
                            {
                                <div class="form-check" style="min-height: 50px">
                                    <input class="form-check-input"  aria-label="Правдивый" type="checkbox" id="defaultCheck1" @bind="varAnswer.Truthful">
                                    <input type="text" class="form-control" aria-label="Введите вопрос" aria-describedby="inputGroup-sizing-sm" @bind="varAnswer.StringAnswer" placeholder="Введите" style="background-color: #EFF4FF; border-color: #EFF4FF; border-bottom-color: #BDD3FF; border-left-color: #BDD3FF; --bs-btn-close-focus-shadow: none">

                                </div>
                            }
                    </div>
                        break;
                        
                        case InteractionType.OneVariantTask:
                            <div class="input-group input-group-sm mb-3" style="max-width: max-content; border-color: #DDE8FF">
                                <span class="input-group-text" id="inputGroup-sizing-sm4" style="background-color: #E7EEFF;  ">кол-во</span>
                                <input type="text" class="form-control" placeholder="Количество вариантов" aria-describedby="inputGroup-sizing-sm"
                                       @bind="task.CountVariables" style="background-color: #EFF4FF; border-color: #BDD3FF;">
                            </div>
                            <div class="question p-3 border-bottom">

                                @foreach (var varAnswer in task.VariableAnswers!)
                                {
                                    <div class="form-check" style="min-height: 50px">
                                      <input class="form-check-input" type="radio" name="flexRadioDefault"  @bind="varAnswer.Truthful"  aria-label="Правдивый">
                                        <input type="text" class="form-control" aria-label="Введите вопрос" aria-describedby="inputGroup-sizing-sm" @bind="varAnswer.StringAnswer" placeholder="Введите" style="background-color: #EFF4FF; border-color: #EFF4FF; border-bottom-color: #BDD3FF;">
                                    </div>
                                    
                                    
                                }
                        </div>
                            break;
                            
                        case InteractionType.ShortStringTask:
                        <div class="question p-3 border-bottom">
                            <input type="text" class="form-control"  aria-describedby="inputGroup-sizing-sm" placeholder="Введите ответ " style="background-color: #EFF4FF; border-color: #EFF4FF; border-bottom-color: #BDD3FF;">
                        </div>
                        break;
                        
                        case InteractionType.LongStringTask:
                        <div class="question p-3 border-bottom">
                            <div class="form-floating" > 
                                <textarea class="form-control"  id="floatingTextarea2" placeholder="Введите ответ " style="background-color: #EFF4FF;  border-color: #BDD3FF; height: 100px"></textarea> 
                                
                            </div>
                            </div>
                        break;
                        
                            
                        
                }
            </div>
        </div>
    }


    <div class="d-flex justify-content-end">

    <div class="dropdown">
        <a class="btn btn-secondary dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="border-radius: .5rem; border-color: #00003A; background-color: #EFF4FF; --bs-btn-color: #00003A; height: 40px; --bs-dropdown-border-color: #EFF4FF" data-toggle="dropdown">
            + 
        </a>
        <ul class="dropdown-menu" style="background-color: #DDE8FF" >
            <li>
                <a class="dropdown-item" @onclick="(() => { Plus(InteractionType.ShortStringTask); })">@InteractionType.ShortStringTask.TaskTypeToString()</a>
            </li>
            <li>
                <a class="dropdown-item" @onclick="(() => { Plus(InteractionType.LongStringTask); })">@InteractionType.LongStringTask.TaskTypeToString()</a>
            </li>
            <li>
                <a class="dropdown-item" @onclick="(() => { Plus(InteractionType.OneVariantTask); })">@InteractionType.OneVariantTask.TaskTypeToString()</a>
            </li>
            <li>
                <a class="dropdown-item" @onclick="(() => { Plus(InteractionType.ManyVariantsTask); })">@InteractionType.ManyVariantsTask.TaskTypeToString()</a>
            </li>
            <li>
                <a class="dropdown-item" @onclick="(() => { Plus(InteractionType.SqlQueryTask); })">@InteractionType.SqlQueryTask.TaskTypeToString()</a>
            </li>
        </ul>
    </div>
    </div>

    <div class="d-grid gap-2 d-md-flex justify-content-md-start" style="height: 40px; -webkit-text-fill-color: #00003A">
        <button class="btn btn-outline-primary" style="border-radius: .5rem; border-color: #00003A; background-color: #EFF4FF; --bs-btn-color: #00003A; height: 40px;" type="button" @onclick="Save">
            Сохранить
        </button>
    </div>
</div>


@code {
    MyTest test = new MyTest();

    private void Plus(InteractionType interactionType)
    {
        test.Tasks!.Add(new MyTask(null, interactionType));
        InvokeAsync(StateHasChanged);
    }

    private async void Save()
    {
        //TODO: proceed save test using ApiService
        await _apiService.PostTest(test);
        Console.WriteLine(test.TestName);
    }

}