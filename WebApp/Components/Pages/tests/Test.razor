@page "/test/{TestId}"
@using WebApp.Services

@using MyTest = Shared.DB.Classes.Test.Test;

@using Shared.DB.Classes.Test.Task
@using Shared.DB.Interfaces
@using Shared.Extensions
@using Task = System.Threading.Tasks.Task
@using System.IdentityModel.Tokens.Jwt


@inject ApiService _ApiService
@inject ILogger<Auth> _logger
@inject NavigationManager nav
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer


<h3 class="text-center" style="-webkit-text-fill-color: #00003A;">Тест: @test.TestName</h3>

@if (Token is null)
{
    <div class="d-flex justify-content-center row">
        <div class="card mb-3" style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
            <div class="col-md-10 col-lg-10">
                <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                    <h4 >Задание 0</h4>
                </div>
                <div class="question p-3 border-bottom">
                    <div class="d-flex flex-row align-items-center question-title">
                        <h5 class="mt-1 ml-2"> Введите имя</h5>
                    </div>

                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @bind="@test.FantomName" aria-describedby="basic-addon1">
                    </div>

                </div>
            </div>
        </div>
    </div>
}
@if (test?.Tasks is null)
{
    <h3>При загрузке теста произошла ошибка, либо не смогли загрузить задания для теста</h3>
}
else
{
    @foreach (var task in test?.Tasks!)
    {
        var number = test.Tasks.IndexOf(task) + 1;
        switch (task.InteractionType)
        {
            case InteractionType.LongStringTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3" style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">
                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4 >Задание @(number)</h4>
                            </div>
                            <div class="question p-3 border-bottom">
                                <div class="d-flex flex-row align-items-center question-title">
                                    <h5 class="mt-1 ml-2">@task.Question</h5>
                                </div>

                                <div class="form-floating">
                                    <textarea class="form-control" type="text" id="floatingTextarea2" @bind="@task.VariableAnswers[0].StringAnswer" style="height: 100px"  >t</textarea>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.ShortStringTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3" style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">
                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4 >Задание @(number)</h4>
                            </div>
                            <div class="question p-3 border-bottom">
                                <div class="d-flex flex-row align-items-center question-title">
                                    <h5 class="mt-1 ml-2"> @task.Question</h5>
                                </div>

                                <div class="input-group mb-3">
                                    <input type="text" class="form-control" @bind="@task.VariableAnswers[0].StringAnswer" aria-describedby="basic-addon1">
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.ManyVariantsTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3" style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">

                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4 >Задание @(number)</h4>
                            </div>
                        </div>
                        <div class="question p-3 border-bottom">
                            <div class="d-flex flex-row align-items-center question-title">
                                <h5 class="mt-1 ml-2"> @task.Question</h5>
                            </div>

                            @foreach (var varAns in task.VariableAnswers!)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="@($"answer-{task.Id}-{varAns.Id}")" @bind="@varAns.Truthful" style="padding: 3pt">
                                    <label class="form-check-label" for="@($"answer-{task.Id}-{varAns.Id}")">
                                        @varAns.StringAnswer
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.OneVariantTask:
                <div class="d-flex justify-content-center row">
                    <div class="card mb-3" style="border-radius: 5px  ; border-color: #00003A; background-color: #EFF4FF; -webkit-text-fill-color: #00003A;">
                        <div class="col-md-10 col-lg-10">

                            <div class="d-flex flex-row justify-content-between  align-items-center mcq">
                                <h4 >Задание @(number)</h4>
                            </div>
                        </div>
                        <div class="question p-3 border-bottom">
                            <div class="d-flex flex-row align-items-center question-title">
                                <h5 class="mt-1">@task.Question</h5>
                            </div>
                            @foreach (var varAns in task.VariableAnswers!)
                            {
                                <div class="ans ml-2">
                                    <label class="radio">
                                        <input type="radio" checked="@varAns.Truthful" @onchange="@(e => UpdateOneAnswer(task, varAns))" name="@($"answer-{task.Id}")" style="padding: 3pt">@varAns.StringAnswer
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                break;
            case InteractionType.None:
                continue;
            case InteractionType.SqlQueryTask:
                continue;
            default:
                continue;
        }
    }

    <div class="d-grid gap-2 d-md-flex justify-content-md-start" style="height: 40px; -webkit-text-fill-color: #00003A; box-shadow: none;">
        <button class="btn btn-outline-primary" @onclick="SaveAndSubmit" style="border-radius: .5rem; border-color: #00003A; background-color: #EFF4FF; --bs-btn-color: #00003A; height: 40px; box-shadow: none;" type="button">
            Сохранить
        </button>
    </div>
}

@code {
    [Parameter] public string TestId { get; set; }

    private string? Token { get; set; }

    private MyTest? test { get; set; } = new MyTest();

    void UpdateOneAnswer(ITask task, VariableAnswer selectedAnswer)
    {
        foreach (var varAns in task.VariableAnswers)
        {
            varAns.Truthful = varAns == selectedAnswer;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Token = HttpContextAccessor.HttpContext?.Request.Cookies[JWTExtensions.JwtCookieName];

        test = await _ApiService.GetTest(TestId);
    }

    private async void SaveAndSubmit()
    {
        if (Token is not null)
        {
            _logger.LogInformation($"Token is {Token} at {nameof(this.SaveAndSubmit)}");
            var userId = new JwtSecurityToken(Token).GetGuidFromToken();
            test!.StudentId = userId;
        }

        var ansTestId = await _ApiService.SubmitTest(test);
        nav.NavigateTo($"result_test/{ansTestId}");
    }
}