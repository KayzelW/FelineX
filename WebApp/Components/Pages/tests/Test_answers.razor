@page "/test_answers/{TestId}"
@using WebApp.Services
@using MyTest = Shared.DB.Classes.Test.Test;
@using Shared.DB.Classes.User
@using Shared.DB.Classes.Test.Task.TaskAnswer
@inherits CookieCheck
@inject ApiService _ApiService

@rendermode InteractiveServer

<div>
    <h2 class="text-left">Решения:</h2>
    <h1> </h1>
</div>


<table class="table table-borderless table-responsive" size="auto" style="--bs-table-bg: #DDEBFF; border-radius: .5rem;  -webkit-text-fill-color: #00003A">
    <thead>
    <tr>
        <th scope="col" style="-webkit-text-fill-color: #00003A">#</th>
        <th scope="col" style="-webkit-text-fill-color: #00003A">Имя студента</th>
        <th scope="col" style=" -webkit-text-fill-color: #00003A">Баллы</th>
        <th scope="col" style="-webkit-text-fill-color: #00003A">Дата прохождения</th>
    </tr>
    </thead>
    <tbody>

    @foreach (var test in _testAnswers)
    {
        <tr>
            <td>
                <p>
                    <a class="link-opacity-100-hover" href="" @onclick="() => NavigateToResults(test.Id.ToString())">@test.Id</a>
                </p>
            </td>
            @if (test.Student is null)
            {
                <th scope="row">@test.FantomName</th>
            }
            else
            {
                <th scope="row">@test.Student.NormalizedUserName</th>
            }
            <td >@test.Score</td>
            <td >@test.PassingDate.ToString()</td>
        </tr>
    }
    </tbody>
</table>


@code {

    [Parameter] public string TestId { get; set; }
    List<TestAnswer> _testAnswers { get; set; } = new List<TestAnswer>();


    public Test_answers()
    {
        RequiredAccessLevel = AccessLevel.Teacher;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            _testAnswers = await _ApiService.GetListStudentsTestAnswers(TestId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void NavigateToResults(string testAnswerId)
    {
        navigationManager.NavigateTo($"result_test_students/{testAnswerId}");
    }

}