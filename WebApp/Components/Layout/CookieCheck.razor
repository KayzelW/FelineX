@using System.IdentityModel.Tokens.Jwt
@using Shared.Extensions
@using WebApp.Services

@inject AuthService authService
@inject NavigationManager nav
@rendermode InteractiveServer
@inject ILogger<CookieCheck> _logger
@inject IHttpContextAccessor HttpContextAccessor

@code {

    private async Task CheckCookie()
    {
        var handler = new JwtSecurityTokenHandler();
        try
        {
            var cookieToken = HttpContextAccessor.HttpContext!.Request.Cookies[JWTExtensions.JwtCookieName];
            if (string.IsNullOrEmpty(cookieToken) || !await authService.CheckExistsAsync(handler.ReadJwtToken(cookieToken)))
            {
                _logger.LogInformation($"Not authtorized or cookie were null|empty");
                if (!nav.Uri.Contains("/auth") && !nav.Uri.Contains("/test"))
                {
                    nav.NavigateTo("/auth", true);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Exception while try get token");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CheckCookie();
        _logger.LogInformation("OnAfterRenderAsync on CC");
    }

}