@using System.IdentityModel.Tokens.Jwt
@using Shared.Extensions
@using WebApp.Services

@inject AuthService authService
@inject NavigationManager nav
@rendermode InteractiveServer
@inject ILogger<CookieCheck> _logger
@inject IHttpContextAccessor HttpContextAccessor

@code {

    private async Task CheckCookie()
    {
        var handler = new JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(HttpContextAccessor.HttpContext!.Request.Cookies[JWTExtensions.JwtCookieName]);

        if (!await authService.CheckExistsAsync(token))
        {
            _logger.LogInformation($"Not authtorized: {handler.WriteToken(token)}");
            if (!nav.Uri.Contains("/auth") && !nav.Uri.Contains("/test"))
            {
                nav.NavigateTo("/auth", true);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CheckCookie();
        _logger.LogInformation("OnAfterRenderAsync on CC");
    }

}