@page "/result_test/{AnsweredTestId}/"

@using Microsoft.Extensions.Logging
@using Shared.Extensions
@using Shared.DB.Test.Answers
@using WebAssembly.Services

@inject ApiService _ApiService
@inject ILogger<TestResult> _logger
@if (TestAnswer is null)
{
    <div class="d-flex justify-content-center">
        <div class="Sticker" style="width: 104px; height: 104px; display: flex; justify-content: flex-end"><img src="https://media.tenor.com/9fBgVWrDYs0AAAAi/run-busy.gif" width="88" height="79.44444444444444" alt="Run Busy Sticker - Run Busy Coko Stickers" style="max-width: 104px; background-color: unset;"></div>
    </div>
    <h3 class="text-center" style="-webkit-text-fill-color: #00003A;">Тест проверяется</h3>
}
else
{
    <h3 class="text-center" style="-webkit-text-fill-color: #00003A;">Ваши результаты:</h3>
    <h3 class="text-center" style="-webkit-text-fill-color: #00003A;">@TestAnswer?.Score%</h3>
    <div class="d-flex justify-content-center" style="min-height: 60px">
        <img src="@CatScoreString" alt="Фото">
    </div>
}



@code {

    [Parameter] public string AnsweredTestId { get; set; }
    private TestAnswer? TestAnswer { get; set; }
    private double CatScore { get; set; }
    private string CatScoreString { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            TestAnswer = await _ApiService.GetTestResult(AnsweredTestId.ToGuid());
            if (TestAnswer != null)
            {
                CatScore = (int)Math.Floor(TestAnswer.Score / 10);
                CatScoreString = $"images/cats/{CatScore}.png";
            }
        }
        catch (Exception e)
        {
            _logger.LogError($"Exception while getting test results with id {AnsweredTestId}:{e}");
        }
    }
}