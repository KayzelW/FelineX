@page "/my_tests"
@attribute [Authorize, AuthorizeLevel(AccessLevel.Exists)]

@using MyTest = Shared.DB.Test.Test;
@using Shared.DB.User

@inject ApiService _ApiService
@inject NavigationManager _navigationManager
@inject ILogger<MyTests> _logger

<div class="d-grid gap-2 d-md-flex justify-content-md-center" >
    <button class="btn" style="border-radius: .5rem; border-color: #00003A; background-color: #EFF4FF; --bs-btn-color: #00003A; height: 40px; box-shadow: none;" type="button" @onclick="NavigateToCreateTest"> Создать новый тест </button>
</div>

<div class="text-success" style="border-color:  #00003A; height: 1px">
    <hr>
</div>

<div>
    <h2 class="text-left">Тесты</h2>
    <h1> </h1>
</div>

@if (Tests.Count == 0)
{
    <p>No available tests</p>
}
else
{
    <table class="table table-borderless table-responsive" size="auto" style="--bs-table-bg: #DDEBFF; border-radius: .5rem;  -webkit-text-fill-color: #00003A">
        <thead>
        <tr>
            <th scope="col" style=" -webkit-text-fill-color: #00003A; border-radius: .5rem">#</th>
            <th scope="col" style="-webkit-text-fill-color: #00003A">Название</th>
            <th scope="col" style="-webkit-text-fill-color: #00003A">Дата создания</th>
            <th scope="col" style=" -webkit-text-fill-color: #00003A">Кол-во заданий</th>
            <th scope="col" style="-webkit-text-fill-color: #00003A"></th>
        </tr>
        </thead>
        <tbody>

        @foreach (var test in Tests)
        {
            <tr>
                <th scope="row">@test.Id</th>
                <td >
                    <p>
                        <a class="link-opacity-100-hover" @onclick="() => NavigateToTest(test.Id.ToString())">@test.TestName</a>
                    </p>
                </td>
                <td >@test.CreationTime.ToString()</td>
                <td >@test.Tasks?.Count</td>
                <td >
                    <div class="btn-group" role="group" aria-label="Basic example" style=" box-shadow: none;">
                        <button type="button" class="btn btn-secondary m-1 btn-transparent" style="background-color: transparent; border: 0px; box-shadow: none;">
                            <i class="bi bi-link-45deg" style="color: #00003A;  box-shadow: none;" title="Менеджер ссылок"></i>
                        </button>
                        <button type="button" class="btn btn-secondary m-1 " style="background-color: transparent; border: 0px; box-shadow: none;">
                            <i class="bi-feather" style="color: #00003A; box-shadow: none;" title="Изменить"></i>

                        </button>
                        <button type="button" class="btn btn-secondary m-1 btn-transparent" style="background-color: transparent; border: 0px;  box-shadow: none;" @onclick="() => DeleteTest(test.Id)">
                            <i class="bi bi-trash3 " style="color: #00003A;  box-shadow: none;" title="Удалить"></i>
                        </button>
                        <button type="button" class="btn btn-secondary m-1 btn-transparent" style="background-color: transparent; border: 0px;  box-shadow: none;" @onclick="() => NavigateToTestAnswers(test.Id.ToString())">
                            <i class="bi bi-person-workspace" style="color: #00003A;  box-shadow: none;" title="Решения"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {


    private List<MyTest> Tests { get; set; } = [];


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            Tests = await _ApiService.GetTests();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void NavigateToCreateTest()
    {
        _navigationManager.NavigateTo("/create_test");
    }

    private void NavigateToTest(string testId)
    {
        _navigationManager.NavigateTo($"test/{testId}");
    }
    
    private void NavigateToTestAnswers(string testId)
    {
        _navigationManager.NavigateTo($"/test_answers/{testId}");
    }

    private async Task DeleteTest(Guid testId)
    {
        Tests.Remove(Tests.FirstOrDefault(x => x.Id == testId)!);
        await _ApiService.DeleteTest(testId);
        _logger.LogInformation($"Test with id {testId} deleted");
        await InvokeAsync(StateHasChanged);
    }


}