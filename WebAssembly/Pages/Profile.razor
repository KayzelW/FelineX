@page "/profile"
@attribute [AuthorizeLevel(AccessLevel.Exists)]

@using Shared.DB.Classes.User

@inject ApiService _apiService
@inject ILogger<Profile> _logger
@inject NavigationManager _navigationManager
@inject LocalStorageService _localStorageService

<h1 class="text-center" style="font-size: 21px; justify-content: center ">Мой профиль @User?.Id</h1>
<div class="row d-flex justify-content-center align-items-center h-100">
    <div class="col col-lg-6 mb-4 mb-lg-0">
        <div class="card mb-3" style="border-radius: .5rem; border-color: #672C94; background-color: #EFF4FF">
            <div class="row g-0">
                <div class="col-md-4 gradient-custom text-center"
                     style="border-top-left-radius: .5rem; border-bottom-left-radius: .5rem;">
                    <img src="images/profile.png"
                         alt="Avatar" class="img-fluid my-5" style="width: 80px;"/>
                </div>
                <div class="col-md-8 justify-content-center" style="-webkit-text-fill-color: #00003A ">
                    <div class="card-body p-5">
                        <h5>@User?.NormalizedUserName</h5>
                        <p>@CurAccessLevel</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button class="btn btn-outline-primary" style="border-radius: .5rem; border-color: #00003A; background-color: #EFF4FF; --bs-btn-color: #00003A;  box-shadow: none;" type="button" @onclick="Logout"> Выход </button>
        </div>
    </div>
</div>


@code {

    private User? User { get; set; }

    private AccessLevel? CurAccessLevel { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation($"start init {this.GetType()}");
        await base.OnInitializedAsync();
        var userId = await _localStorageService.GetUserIdAsync();

        if (userId == null)
        {
            _logger.LogInformation($"userId is null on {this.GetType()}");
            _navigationManager.NavigateTo("/auth");
            return;
        }

        User = await _apiService.GetUser(userId.Value);

        if (User != null)
        {
            CurAccessLevel = User.Access;
        }
        else
        {
            _logger.LogInformation($"User with ID {userId.Value} doesn't exists");
        }

        _logger.LogInformation($"loading {this.GetType()}");
        await InvokeAsync(StateHasChanged);
    }
    
    private void Logout()
    {
        _localStorageService.RemoveJwtToken();
        _navigationManager.NavigateTo("/auth");
    }

}