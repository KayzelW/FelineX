@using System.Reflection
@using System.Reflection.Metadata
@using Microsoft.Extensions.Logging
@using Shared.Interfaces

@if (_isLoading)
{
<div class="loading-container">
    <div class="loader">
        <div class="inner one"></div>
        <div class="inner two"></div>
        <div class="inner three"></div>
    </div>
    <div class="loading-progress-text">Загрузка...</div>
</div>
}
else if (_isAuthorized)
{
    @ChildContent
}
else
{
    <p>Нет прав для доступа на эту страницу...</p>
}

@code {
    [Parameter] public RouteData? RouteData { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private ILogger<AuthorizedRouteView> _logger { get; set; }
    [Inject] private IUserContextService _userContext { get; set; }

    private bool _isAuthorized = false;
    private bool _isLoading = true;
    private string? _redirectUrl = null;

    protected override async Task OnParametersSetAsync()
    {

        _logger.LogInformation($"Try load page {RouteData?.PageType}");
        _isAuthorized = false;
        _isLoading = true;
        _redirectUrl = "";

        await Task.Run(async () =>
        {
            var context = _userContext as UserContextService;
            while (context.isLoading)
            {
                _logger.LogWarning("await setup userContext");
                await Task.Delay(100);
            }
        });

        if (RouteData == null)
        {
            Failed();
            return;
        }

        var pageType = RouteData.PageType;
        var authorizeLevelAttribute = pageType.GetCustomAttribute<AuthorizeLevelAttribute>();
        if (authorizeLevelAttribute == null)
        {
            if (!string.IsNullOrEmpty(_redirectUrl))
            {
                _logger.LogInformation($"Navigated to {_redirectUrl}");
                Navigation.NavigateTo(_redirectUrl);
            }

            _isLoading = false;
            _isAuthorized = true;
            StateHasChanged();
            return;
        }

        if (!_userContext.IsAuthorized)
        {
            _logger.LogInformation("User is not authenticated.");
            Failed();
            return;
        }

        var requiredLevel = authorizeLevelAttribute!.RequiredLevel;
        _logger.LogInformation($"Check user(token = {_userContext.UserToken}) for {requiredLevel} | {pageType}");
        if (_userContext.HasAccess(requiredLevel))
        {
            _isAuthorized = true;
        }
        else
        {
            _logger.LogInformation("Access level check failed.");
            Failed();
        }

        _logger.LogInformation($"Routing to {pageType}");
        _isLoading = false;
        StateHasChanged();
    }

    private void Failed()
    {
        _redirectUrl = "/auth";
        _isLoading = false;
    }

}

